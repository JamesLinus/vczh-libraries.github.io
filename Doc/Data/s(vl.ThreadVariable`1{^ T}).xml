<?xml version="1.0" encoding="utf-8"?>
<Symbols>
  <TemplateDecl Access="Public" Tags="x86, Windows">
    <TypeParameters>
      <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::T" />
    </TypeParameters>
    <Specialization>
      <DecorateTypeDecl Decoration="Pointer">
        <Element>
          <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
            <ReferencingOverloadKeys>
              <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
            </ReferencingOverloadKeys>
          </RefTypeDecl>
        </Element>
      </DecorateTypeDecl>
    </Specialization>
    <Element>
      <ClassDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;" ClassType="Class">
        <Children>
          <VarDecl Access="Protected" Name="storage" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::storage" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::storage" Static="False">
            <Type>
              <RefTypeDecl ReferencingNameKey="::vl::ThreadLocalStorage" Name="ThreadLocalStorage">
                <ReferencingOverloadKeys>
                  <Key Value="::vl::ThreadLocalStorage@s:vl.ThreadLocalStorage" />
                </ReferencingOverloadKeys>
              </RefTypeDecl>
            </Type>
          </VarDecl>
          <FuncDecl Access="Public" Name="ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::ThreadVariable()" Virtual="Normal" Function="Constructor">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="void" />
                </ReturnType>
                <Parameters />
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="~ThreadVariable" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::~ThreadVariable" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::~ThreadVariable()" Virtual="Normal" Function="Destructor">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="void" />
                </ReturnType>
                <Parameters />
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="HasData" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::HasData" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::HasData()" Virtual="Normal" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="bool" />
                </ReturnType>
                <Parameters />
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Clear" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Clear()" Virtual="Normal" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="void" />
                </ReturnType>
                <Parameters />
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="Get" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Get" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Get()" Virtual="Normal" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <DecorateTypeDecl Decoration="Pointer">
                    <Element>
                      <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                        <ReferencingOverloadKeys>
                          <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
                        </ReferencingOverloadKeys>
                      </RefTypeDecl>
                    </Element>
                  </DecorateTypeDecl>
                </ReturnType>
                <Parameters />
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="Set" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Set(* T)" Virtual="Normal" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="void" />
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::ThreadVariable::Set::value" OverloadKey="::vl::ThreadVariable`1&lt;* T&gt;::Set(* T)::value" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="Pointer">
                        <Element>
                          <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                            <ReferencingOverloadKeys>
                              <Key Value="::vl::ThreadVariable`1&lt;* T&gt;::T@s:vl.ThreadVariable`1{^ T}" />
                            </ReferencingOverloadKeys>
                          </RefTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
        </Children>
        <BaseTypes>
          <BaseTypeDecl Access="Public" Tags="x86, Windows">
            <Type>
              <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                <ReferencingOverloadKeys>
                  <Key Value="::vl::Object@s:vl.Object" />
                </ReferencingOverloadKeys>
              </RefTypeDecl>
            </Type>
          </BaseTypeDecl>
          <BaseTypeDecl Access="Private" Tags="x86, Windows">
            <Type>
              <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
                <ReferencingOverloadKeys>
                  <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
                </ReferencingOverloadKeys>
              </RefTypeDecl>
            </Type>
          </BaseTypeDecl>
        </BaseTypes>
      </ClassDecl>
    </Element>
  </TemplateDecl>
</Symbols>