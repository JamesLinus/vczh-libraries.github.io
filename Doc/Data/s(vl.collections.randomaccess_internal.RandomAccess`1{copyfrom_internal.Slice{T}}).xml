<?xml version="1.0" encoding="utf-8"?>
<Symbols>
  <TemplateDecl Access="Public" Tags="x86, Windows">
    <TypeParameters>
      <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::collections::randomaccess_internal::T" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::T" />
    </TypeParameters>
    <Specialization>
      <GenericTypeDecl>
        <Element>
          <SubTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal::Slice" Name="Slice">
            <ReferencingOverloadKeys>
              <Key Value="::vl::collections::copyfrom_internal::Slice`1@s:vl.collections.copyfrom_internal.Slice`1" />
            </ReferencingOverloadKeys>
            <Parent>
              <RefTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal" Name="copyfrom_internal">
                <ReferencingOverloadKeys>
                  <Key Value="::vl::collections::copyfrom_internal@ns:vl.collections.copyfrom_internal" />
                </ReferencingOverloadKeys>
              </RefTypeDecl>
            </Parent>
          </SubTypeDecl>
        </Element>
        <TypeArguments>
          <RefTypeDecl ReferencingNameKey="::vl::collections::randomaccess_internal::T" Name="T">
            <ReferencingOverloadKeys>
              <Key Value="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::T@s:vl.collections.randomaccess_internal.RandomAccess`1{copyfrom_internal.Slice{T}}" />
            </ReferencingOverloadKeys>
          </RefTypeDecl>
        </TypeArguments>
      </GenericTypeDecl>
    </Specialization>
    <Element>
      <ClassDecl Access="Public" Name="RandomAccess" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;" ClassType="Struct">
        <Children>
          <FuncDecl Access="Public" Name="GetCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess::GetCount" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::GetCount(&amp; const copyfrom_internal::Slice&lt;T&gt;)" Virtual="Static" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                    <ReferencingOverloadKeys>
                      <Key Value="::vl::vint@s:vl.vint" />
                    </ReferencingOverloadKeys>
                  </RefTypeDecl>
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="t" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess::GetCount::t" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::GetCount(&amp; const copyfrom_internal::Slice&lt;T&gt;)::t" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="LeftRef">
                        <Element>
                          <DecorateTypeDecl Decoration="Const">
                            <Element>
                              <GenericTypeDecl>
                                <Element>
                                  <SubTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal::Slice" Name="Slice">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::collections::copyfrom_internal::Slice`1@s:vl.collections.copyfrom_internal.Slice`1" />
                                    </ReferencingOverloadKeys>
                                    <Parent>
                                      <RefTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal" Name="copyfrom_internal">
                                        <ReferencingOverloadKeys>
                                          <Key Value="::vl::collections::copyfrom_internal@ns:vl.collections.copyfrom_internal" />
                                        </ReferencingOverloadKeys>
                                      </RefTypeDecl>
                                    </Parent>
                                  </SubTypeDecl>
                                </Element>
                                <TypeArguments>
                                  <RefTypeDecl ReferencingNameKey="::vl::collections::randomaccess_internal::T" Name="T">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::T@s:vl.collections.randomaccess_internal.RandomAccess`1{copyfrom_internal.Slice{T}}" />
                                    </ReferencingOverloadKeys>
                                  </RefTypeDecl>
                                </TypeArguments>
                              </GenericTypeDecl>
                            </Element>
                          </DecorateTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="GetValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess::GetValue" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::GetValue(&amp; const copyfrom_internal::Slice&lt;T&gt;,vint)" Virtual="Static" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <DecorateTypeDecl Decoration="LeftRef">
                    <Element>
                      <DecorateTypeDecl Decoration="Const">
                        <Element>
                          <RefTypeDecl ReferencingNameKey="::vl::collections::randomaccess_internal::T" Name="T">
                            <ReferencingOverloadKeys>
                              <Key Value="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::T@s:vl.collections.randomaccess_internal.RandomAccess`1{copyfrom_internal.Slice{T}}" />
                            </ReferencingOverloadKeys>
                          </RefTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Element>
                  </DecorateTypeDecl>
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="t" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess::GetValue::t" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::GetValue(&amp; const copyfrom_internal::Slice&lt;T&gt;,vint)::t" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="LeftRef">
                        <Element>
                          <DecorateTypeDecl Decoration="Const">
                            <Element>
                              <GenericTypeDecl>
                                <Element>
                                  <SubTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal::Slice" Name="Slice">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::collections::copyfrom_internal::Slice`1@s:vl.collections.copyfrom_internal.Slice`1" />
                                    </ReferencingOverloadKeys>
                                    <Parent>
                                      <RefTypeDecl ReferencingNameKey="::vl::collections::copyfrom_internal" Name="copyfrom_internal">
                                        <ReferencingOverloadKeys>
                                          <Key Value="::vl::collections::copyfrom_internal@ns:vl.collections.copyfrom_internal" />
                                        </ReferencingOverloadKeys>
                                      </RefTypeDecl>
                                    </Parent>
                                  </SubTypeDecl>
                                </Element>
                                <TypeArguments>
                                  <RefTypeDecl ReferencingNameKey="::vl::collections::randomaccess_internal::T" Name="T">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::T@s:vl.collections.randomaccess_internal.RandomAccess`1{copyfrom_internal.Slice{T}}" />
                                    </ReferencingOverloadKeys>
                                  </RefTypeDecl>
                                </TypeArguments>
                              </GenericTypeDecl>
                            </Element>
                          </DecorateTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                  <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::randomaccess_internal::RandomAccess::GetValue::index" OverloadKey="::vl::collections::randomaccess_internal::RandomAccess`1&lt;copyfrom_internal::Slice&lt;T&gt;&gt;::GetValue(&amp; const copyfrom_internal::Slice&lt;T&gt;,vint)::index" Static="False">
                    <Type>
                      <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                        <ReferencingOverloadKeys>
                          <Key Value="::vl::vint@s:vl.vint" />
                        </ReferencingOverloadKeys>
                      </RefTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
        </Children>
        <BaseTypes />
      </ClassDecl>
    </Element>
  </TemplateDecl>
</Symbols>