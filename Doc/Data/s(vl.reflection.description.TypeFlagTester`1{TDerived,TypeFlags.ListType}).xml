<?xml version="1.0" encoding="utf-8"?>
<Symbols>
  <TemplateDecl Access="Public" Tags="x86, Windows">
    <TypeParameters>
      <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::TDerived" />
    </TypeParameters>
    <Specialization>
      <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
        <ReferencingOverloadKeys>
          <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}" />
        </ReferencingOverloadKeys>
      </RefTypeDecl>
      <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ListType" Name="ListType">
        <ReferencingOverloadKeys>
          <Key Value="::vl::reflection::description::TypeFlags::ListType@s:vl.reflection.description.TypeFlags" />
        </ReferencingOverloadKeys>
        <Parent>
          <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
            <ReferencingOverloadKeys>
              <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
            </ReferencingOverloadKeys>
          </RefTypeDecl>
        </Parent>
      </SubTypeDecl>
    </Specialization>
    <Element>
      <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;" ClassType="Struct">
        <Children>
          <TemplateDecl Access="Public" Tags="x86, Windows">
            <TypeParameters>
              <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::T" />
            </TypeParameters>
            <Specialization />
            <Element>
              <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)" Virtual="Static" Function="Function">
                <Type>
                  <FunctionTypeDecl CallingConvention="Default" Const="False">
                    <ReturnType>
                      <DecorateTypeDecl Decoration="Pointer">
                        <Element>
                          <RefTypeDecl Name="void" />
                        </Element>
                      </DecorateTypeDecl>
                    </ReturnType>
                    <Parameters>
                      <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::source" Static="False">
                        <Type>
                          <DecorateTypeDecl Decoration="Pointer">
                            <Element>
                              <GenericTypeDecl>
                                <Element>
                                  <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                                    </ReferencingOverloadKeys>
                                    <Parent>
                                      <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                        <ReferencingOverloadKeys>
                                          <Key Value="::vl::collections@ns:vl.collections" />
                                        </ReferencingOverloadKeys>
                                      </RefTypeDecl>
                                    </Parent>
                                  </SubTypeDecl>
                                </Element>
                                <TypeArguments>
                                  <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}" />
                                    </ReferencingOverloadKeys>
                                  </RefTypeDecl>
                                </TypeArguments>
                              </GenericTypeDecl>
                            </Element>
                          </DecorateTypeDecl>
                        </Type>
                      </VarDecl>
                    </Parameters>
                  </FunctionTypeDecl>
                </Type>
              </FuncDecl>
            </Element>
          </TemplateDecl>
          <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="char" />
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* void)::source" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="Pointer">
                        <Element>
                          <RefTypeDecl Name="void" />
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <RefTypeDecl Name="char" />
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* const void)::source" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="Pointer">
                        <Element>
                          <DecorateTypeDecl Decoration="Const">
                            <Element>
                              <RefTypeDecl Name="void" />
                            </Element>
                          </DecorateTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
          <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Result" Static="True">
            <Type>
              <DecorateTypeDecl Decoration="Const">
                <Element>
                  <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                    <ReferencingOverloadKeys>
                      <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                    </ReferencingOverloadKeys>
                  </RefTypeDecl>
                </Element>
              </DecorateTypeDecl>
            </Type>
          </VarDecl>
        </Children>
        <BaseTypes />
      </ClassDecl>
    </Element>
  </TemplateDecl>
</Symbols>