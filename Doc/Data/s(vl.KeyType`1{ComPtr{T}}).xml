<?xml version="1.0" encoding="utf-8"?>
<Symbols>
  <TemplateDecl Access="Public" Tags="x86, Windows">
    <TypeParameters>
      <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T" />
    </TypeParameters>
    <Specialization>
      <GenericTypeDecl>
        <Element>
          <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
            <ReferencingOverloadKeys>
              <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
            </ReferencingOverloadKeys>
          </RefTypeDecl>
        </Element>
        <TypeArguments>
          <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
            <ReferencingOverloadKeys>
              <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
            </ReferencingOverloadKeys>
          </RefTypeDecl>
        </TypeArguments>
      </GenericTypeDecl>
    </Specialization>
    <Element>
      <ClassDecl Access="Public" Name="KeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;" ClassType="Struct">
        <Children>
          <TypedefDecl Access="Public" Name="Type" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::Type" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::Type">
            <Type>
              <DecorateTypeDecl Decoration="Pointer">
                <Element>
                  <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                    <ReferencingOverloadKeys>
                      <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                    </ReferencingOverloadKeys>
                  </RefTypeDecl>
                </Element>
              </DecorateTypeDecl>
            </Type>
          </TypedefDecl>
          <FuncDecl Access="Public" Name="GetKeyValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::GetKeyValue(&amp; const ComPtr&lt;T&gt;)" Virtual="Static" Function="Function">
            <Type>
              <FunctionTypeDecl CallingConvention="Default" Const="False">
                <ReturnType>
                  <DecorateTypeDecl Decoration="Pointer">
                    <Element>
                      <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                        <ReferencingOverloadKeys>
                          <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                        </ReferencingOverloadKeys>
                      </RefTypeDecl>
                    </Element>
                  </DecorateTypeDecl>
                </ReturnType>
                <Parameters>
                  <VarDecl Access="Public" Name="key" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue::key" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::GetKeyValue(&amp; const ComPtr&lt;T&gt;)::key" Static="False">
                    <Type>
                      <DecorateTypeDecl Decoration="LeftRef">
                        <Element>
                          <DecorateTypeDecl Decoration="Const">
                            <Element>
                              <GenericTypeDecl>
                                <Element>
                                  <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                    </ReferencingOverloadKeys>
                                  </RefTypeDecl>
                                </Element>
                                <TypeArguments>
                                  <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                    <ReferencingOverloadKeys>
                                      <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                                    </ReferencingOverloadKeys>
                                  </RefTypeDecl>
                                </TypeArguments>
                              </GenericTypeDecl>
                            </Element>
                          </DecorateTypeDecl>
                        </Element>
                      </DecorateTypeDecl>
                    </Type>
                  </VarDecl>
                </Parameters>
              </FunctionTypeDecl>
            </Type>
          </FuncDecl>
        </Children>
        <BaseTypes />
      </ClassDecl>
    </Element>
  </TemplateDecl>
</Symbols>