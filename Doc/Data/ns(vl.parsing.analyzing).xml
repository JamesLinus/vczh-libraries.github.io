<?xml version="1.0" encoding="utf-8"?>
<Namespace DisplayName="::vl::parsing::analyzing">
  <Overloads DisplayName="Action class">
    <Symbol Key="::vl::parsing::analyzing::Action" UrlName="vl.parsing.analyzing.Action" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Automaton class">
    <Symbol Key="::vl::parsing::analyzing::Automaton" UrlName="vl.parsing.analyzing.Automaton" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ClosureItem struct">
    <Symbol Key="::vl::parsing::analyzing::ClosureItem" UrlName="vl.parsing.analyzing.ClosureItem" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CompactJointPDA function">
    <Symbol Key="::vl::parsing::analyzing::CompactJointPDA(Ptr&lt;Automaton&gt;)" UrlName="vl.parsing.analyzing.CompactJointPDA(Ptr{Automaton})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CreateEpsilonPDA function">
    <Symbol Key="::vl::parsing::analyzing::CreateEpsilonPDA(Ptr&lt;definitions::ParsingDefinition&gt;,* ParsingSymbolManager)" UrlName="vl.parsing.analyzing.CreateEpsilonPDA(Ptr{definitions.ParsingDefinition},^ ParsingSymbolManager)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CreateJointPDAFromNondeterministicPDA function">
    <Symbol Key="::vl::parsing::analyzing::CreateJointPDAFromNondeterministicPDA(Ptr&lt;Automaton&gt;)" UrlName="vl.parsing.analyzing.CreateJointPDAFromNondeterministicPDA(Ptr{Automaton})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CreateNondeterministicPDAFromEpsilonPDA function">
    <Symbol Key="::vl::parsing::analyzing::CreateNondeterministicPDAFromEpsilonPDA(Ptr&lt;Automaton&gt;)" UrlName="vl.parsing.analyzing.CreateNondeterministicPDAFromEpsilonPDA(Ptr{Automaton})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="DefinitionTypeScopePair struct">
    <Symbol Key="::vl::parsing::analyzing::DefinitionTypeScopePair" UrlName="vl.parsing.analyzing.DefinitionTypeScopePair" Doc="false" />
  </Overloads>
  <Overloads DisplayName="DeleteUnnecessaryStates function">
    <Symbol Key="::vl::parsing::analyzing::DeleteUnnecessaryStates(Ptr&lt;Automaton&gt;,Ptr&lt;RuleInfo&gt;,&amp; collections::List&lt;* State&gt;)" UrlName="vl.parsing.analyzing.DeleteUnnecessaryStates(Ptr{Automaton},Ptr{RuleInfo},&amp; collections.List{^ State})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="FindType function">
    <Symbol Key="::vl::parsing::analyzing::FindType(* definitions::ParsingDefinitionType,* ParsingSymbolManager,* ParsingSymbol,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.FindType(^ definitions.ParsingDefinitionType,^ ParsingSymbolManager,^ ParsingSymbol,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateTable function">
    <Symbol Key="::vl::parsing::analyzing::GenerateTable(Ptr&lt;definitions::ParsingDefinition&gt;,bool,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.GenerateTable(Ptr{definitions.ParsingDefinition},bool,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateTableFromPDA function">
    <Symbol Key="::vl::parsing::analyzing::GenerateTableFromPDA(Ptr&lt;definitions::ParsingDefinition&gt;,* ParsingSymbolManager,Ptr&lt;Automaton&gt;,bool,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.GenerateTableFromPDA(Ptr{definitions.ParsingDefinition},^ ParsingSymbolManager,Ptr{Automaton},bool,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GetTypeFullName function">
    <Symbol Key="::vl::parsing::analyzing::GetTypeFullName(* ParsingSymbol)" UrlName="vl.parsing.analyzing.GetTypeFullName(^ ParsingSymbol)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GetTypeNameForCreateInstruction function">
    <Symbol Key="::vl::parsing::analyzing::GetTypeNameForCreateInstruction(* ParsingSymbol)" UrlName="vl.parsing.analyzing.GetTypeNameForCreateInstruction(^ ParsingSymbol)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Log function">
    <Symbol Key="::vl::parsing::analyzing::Log(Ptr&lt;Automaton&gt;,&amp; stream::TextWriter)" UrlName="vl.parsing.analyzing.Log(Ptr{Automaton},&amp; stream.TextWriter)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="MarkLeftRecursiveInJointPDA function">
    <Symbol Key="::vl::parsing::analyzing::MarkLeftRecursiveInJointPDA(Ptr&lt;Automaton&gt;,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.MarkLeftRecursiveInJointPDA(Ptr{Automaton},&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="MergeStates function">
    <Symbol Key="::vl::parsing::analyzing::MergeStates(Ptr&lt;Automaton&gt;,Ptr&lt;RuleInfo&gt;,&amp; collections::List&lt;* State&gt;)" UrlName="vl.parsing.analyzing.MergeStates(Ptr{Automaton},Ptr{RuleInfo},&amp; collections.List{^ State})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ParsingSymbol class">
    <Symbol Key="::vl::parsing::analyzing::ParsingSymbol" UrlName="vl.parsing.analyzing.ParsingSymbol" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ParsingSymbolManager class">
    <Symbol Key="::vl::parsing::analyzing::ParsingSymbolManager" UrlName="vl.parsing.analyzing.ParsingSymbolManager" Doc="false" />
  </Overloads>
  <Overloads DisplayName="PrepareSymbols function">
    <Symbol Key="::vl::parsing::analyzing::PrepareSymbols(Ptr&lt;definitions::ParsingDefinition&gt;,* ParsingSymbolManager,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.PrepareSymbols(Ptr{definitions.ParsingDefinition},^ ParsingSymbolManager,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RemoveEpsilonTransitions function">
    <Symbol Key="::vl::parsing::analyzing::RemoveEpsilonTransitions(&amp; collections::Dictionary&lt;* State, * State&gt;,&amp; collections::List&lt;* State&gt;,Ptr&lt;Automaton&gt;)" UrlName="vl.parsing.analyzing.RemoveEpsilonTransitions(&amp; collections.Dictionary{^ State, ^ State},&amp; collections.List{^ State},Ptr{Automaton})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ResolveRuleSymbols function">
    <Symbol Key="::vl::parsing::analyzing::ResolveRuleSymbols(Ptr&lt;definitions::ParsingDefinitionRuleDefinition&gt;,* ParsingSymbolManager,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.ResolveRuleSymbols(Ptr{definitions.ParsingDefinitionRuleDefinition},^ ParsingSymbolManager,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ResolveSymbols function">
    <Symbol Key="::vl::parsing::analyzing::ResolveSymbols(Ptr&lt;definitions::ParsingDefinition&gt;,* ParsingSymbolManager,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.ResolveSymbols(Ptr{definitions.ParsingDefinition},^ ParsingSymbolManager,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RuleInfo class">
    <Symbol Key="::vl::parsing::analyzing::RuleInfo" UrlName="vl.parsing.analyzing.RuleInfo" Doc="false" />
  </Overloads>
  <Overloads DisplayName="SearchClosure function">
    <Symbol Key="::vl::parsing::analyzing::SearchClosure(* function (* Transition) : ClosureItem::SearchResult,* State,&amp; collections::List&lt;ClosureItem&gt;)" UrlName="vl.parsing.analyzing.SearchClosure(^ function (^ Transition) # ClosureItem.SearchResult,^ State,&amp; collections.List{ClosureItem})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="State class">
    <Symbol Key="::vl::parsing::analyzing::State" UrlName="vl.parsing.analyzing.State" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Transition class">
    <Symbol Key="::vl::parsing::analyzing::Transition" UrlName="vl.parsing.analyzing.Transition" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ValidateDefinition function">
    <Symbol Key="::vl::parsing::analyzing::ValidateDefinition(Ptr&lt;definitions::ParsingDefinition&gt;,* ParsingSymbolManager,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.ValidateDefinition(Ptr{definitions.ParsingDefinition},^ ParsingSymbolManager,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ValidateRuleStructure function">
    <Symbol Key="::vl::parsing::analyzing::ValidateRuleStructure(Ptr&lt;definitions::ParsingDefinition&gt;,Ptr&lt;definitions::ParsingDefinitionRuleDefinition&gt;,* ParsingSymbolManager,&amp; collections::List&lt;Ptr&lt;ParsingError&gt;&gt;)" UrlName="vl.parsing.analyzing.ValidateRuleStructure(Ptr{definitions.ParsingDefinition},Ptr{definitions.ParsingDefinitionRuleDefinition},^ ParsingSymbolManager,&amp; collections.List{Ptr{ParsingError}})" Doc="false" />
  </Overloads>
</Namespace>